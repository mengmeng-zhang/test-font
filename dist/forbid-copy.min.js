(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["createCopyListener"] = factory();
	else
		root["createCopyListener"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = privateMap.get(receiver);

  if (!descriptor) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }

  return descriptor.value;
}

module.exports = _classPrivateFieldGet;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = privateMap.get(receiver);

  if (!descriptor) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }

    descriptor.value = value;
  }

  return value;
}

module.exports = _classPrivateFieldSet;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");

var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;

/***/ }),

/***/ "./node_modules/charenc/charenc.js":
/*!*****************************************!*\
  !*** ./node_modules/charenc/charenc.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;


/***/ }),

/***/ "./node_modules/crypt/crypt.js":
/*!*************************************!*\
  !*** ./node_modules/crypt/crypt.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();


/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "./node_modules/md5/md5.js":
/*!*********************************!*\
  !*** ./node_modules/md5/md5.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function(){
  var crypt = __webpack_require__(/*! crypt */ "./node_modules/crypt/crypt.js"),
      utf8 = __webpack_require__(/*! charenc */ "./node_modules/charenc/charenc.js").utf8,
      isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/is-buffer/index.js"),
      bin = __webpack_require__(/*! charenc */ "./node_modules/charenc/charenc.js").bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message) && message.constructor !== Uint8Array)
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();


/***/ }),

/***/ "./src/config/index.js":
/*!*****************************!*\
  !*** ./src/config/index.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  // 配置文件
  var config = {
    GATHER_SERVER_URL: "https://maia-sit.longfor.com/api/maia-watermark-sit/watermark/insert",
    API_KEY: "8f40b468-a2fc-4baa-adcf-b9202efb1c57",
    ERROR_GATHER_SERVER_URL: "https://maia-sit.longfor.com/api/maia-watermark-sit/watermark/insert",
    ERROR_API_KEY: "8f40b468-a2fc-4baa-adcf-b9202efb1c57",
    VERSION: "1.0.0",
    // SDK版本号
    CHUNKCOUNT: 2000,
    // 水印编码转换字数统计上报阈值
    CODE_BASE: 4,
    // 水印编码转换进制
    CODELEN: 10,
    // 水印编码长度10
    // FONT_BASE_URL: G_FONT_BASE_URL + G_VERSION + '/', // 字体文件路径
    FONT_BASE_URL: "/dist/fonts/",
    // 字体文件路径
    SPADES_URL: "/dist/data/spades.txt",
    // 字符表
    IS_SERVER_TRANSFER: false,
    // 服务端转换文本
    FONT_TYPES: ["ttf"],
    // 字体文件支持类型
    TIMEOUT: 3000,
    // 资源加载超时时间
    VALID_SYSTEM: ["WINDOWS","MAC","IOS","ANDROID"],
    // 开启字体水印的操作系统
    IS_OPEN_NON_NETWORK: false // 开始无网络状态水印处理

  };
  module.exports = config;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/config/option.js":
/*!******************************!*\
  !*** ./src/config/option.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_classCallCheck2, _createClass2) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);

  var DeviceDetect = __webpack_require__(/*! ../core/deviceDetect */ "./src/core/deviceDetect.js");

  var Utils = __webpack_require__(/*! ../utils */ "./src/utils/index.js");

  var _require = __webpack_require__(/*! ../data/fonts */ "./src/data/fonts.js"),
      MICROSOFTYAHEI = _require.MICROSOFTYAHEI,
      PINGFANGSC = _require.PINGFANGSC;

  var defaultOptions = {
    fontName: '',
    winFontName: '',
    macFontName: '',
    androidFontName: '',
    iosFontName: '',
    timeout: 3000
  };
  /**
   *    fontName: 全部操作系统默认字体(MicrosoftYahei) // 其实没有默认值
   *    winFontName: windows(MicrosoftYahei)
   *    macFontName: mac(PingfangSC)
   *    androidFontName: android(MicrosoftYahei)
   *    iosFontName: ios(PingfangSC)
   *    timeout: 超时时间
   * 不建议开放的配置
   *    system: 指定开启水印编码的操作系统(window/mac/android/ios)
   */

  var OptionsManager = /*#__PURE__*/function () {
    function OptionsManager(options) {
      (0, _classCallCheck2.default)(this, OptionsManager);

      if (!Utils.isObject(options)) {
        options = {};
      }

      var system = DeviceDetect.getSystem().toUpperCase() || 'WINDOWS'; // WINDOWS MAC IOS ANDROID
      // 处理fontName得到当前系统指定的字体名称

      checkOptions(options, 'fontName', 'string');
      checkOptions(options, 'winFontName', 'string');
      checkOptions(options, 'macFontName', 'string');
      checkOptions(options, 'androidFontName', 'string');
      checkOptions(options, 'iosFontName', 'string');
      options['WINDOWS'] = options['winFontName'] || options['fontName'] || MICROSOFTYAHEI;
      options['MAC'] = options['macFontName'] || options['fontName'] || PINGFANGSC;
      options['ANDROID'] = options['androidFontName'] || options['fontName'] || MICROSOFTYAHEI;
      options['IOS'] = options['iosFontName'] || options['fontName'] || PINGFANGSC;
      this.options = options;
      this.systemFontName = this.options[system];
    }

    (0, _createClass2.default)(OptionsManager, [{
      key: "getSystemFontName",
      value: function getSystemFontName() {
        return this.systemFontName;
      }
    }, {
      key: "getTimeout",
      value: function getTimeout() {
        return this.options['timeout'];
      }
    }]);
    return OptionsManager;
  }();

  function checkOptions(options, paramName, type) {
    switch (type) {
      case 'string':
        if (options[paramName] && Utils.isNotString(options[paramName])) {
          options[paramName] = defaultOptions[paramName];
        }

        break;

      case 'number':
        if (options[paramName] && Utils.isNotNaNNumber(options[paramName])) {
          options[paramName] = defaultOptions[paramName];
        }

        break;

      default:
        break;
    }
  }

  module.exports = OptionsManager;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/core/copyListener.js":
/*!**********************************!*\
  !*** ./src/core/copyListener.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"), __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"), __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"), __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldGet */ "./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js"), __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldSet */ "./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_toConsumableArray2, _slicedToArray2, _classCallCheck2, _createClass2, _classPrivateFieldGet2, _classPrivateFieldSet2) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  _toConsumableArray2 = _interopRequireDefault(_toConsumableArray2);
  _slicedToArray2 = _interopRequireDefault(_slicedToArray2);
  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);
  _classPrivateFieldGet2 = _interopRequireDefault(_classPrivateFieldGet2);
  _classPrivateFieldSet2 = _interopRequireDefault(_classPrivateFieldSet2);

  var Transfer = __webpack_require__(/*! ./transfer */ "./src/core/transfer.js");

  var Utils = __webpack_require__(/*! ../utils/index */ "./src/utils/index.js");

  var config = __webpack_require__(/*! ../config */ "./src/config/index.js");

  var _require = __webpack_require__(/*! ../data/events */ "./src/data/events.js"),
      EVENT_CONNECTED = _require.EVENT_CONNECTED,
      EVENT_TIMEOUT = _require.EVENT_TIMEOUT,
      EVENT_ADD_FONT_RULE = _require.EVENT_ADD_FONT_RULE,
      EVENT_REMOVE = _require.EVENT_REMOVE,
      EVENT_ERROR = _require.EVENT_ERROR;

  var DeviceDetect = __webpack_require__(/*! ./deviceDetect */ "./src/core/deviceDetect.js");

  var _transfer = new WeakMap();

  var _loaded = new WeakMap();

  var _error = new WeakMap();

  var _recorder = new WeakMap();

  var _fontManager = new WeakMap();

  var CopyListener = /*#__PURE__*/function () {
    function CopyListener(recorder, fontManager) {
      var _this = this;

      (0, _classCallCheck2.default)(this, CopyListener);

      _transfer.set(this, {
        writable: true,
        value: null
      });

      _loaded.set(this, {
        writable: true,
        value: false
      });

      _error.set(this, {
        writable: true,
        value: false
      });

      _recorder.set(this, {
        writable: true,
        value: null
      });

      _fontManager.set(this, {
        writable: true,
        value: null
      });

      (0, _classPrivateFieldSet2.default)(this, _recorder, recorder);
      (0, _classPrivateFieldSet2.default)(this, _fontManager, fontManager); // 字体资源管理器

      this.eventQueue = {}; // 事件队列

      this.domSelector = new Set();
      var promises = [];

      if (!DeviceDetect.isServerTransfer()) {
        promises.push((0, _classPrivateFieldGet2.default)(this, _fontManager).loadSpadeFile()); // 加载字形unicode文件
      }

      promises.push((0, _classPrivateFieldGet2.default)(this, _fontManager).loadAllFontFile()); // 加载字体文件

      Promise.all(promises).then(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            encodeText = _ref2[0],
            fontUrls = _ref2[1];

        (0, _classPrivateFieldGet2.default)(_this, _fontManager).addFontSpade(encodeText);
        (0, _classPrivateFieldSet2.default)(_this, _transfer, new Transfer((0, _classPrivateFieldGet2.default)(_this, _recorder), (0, _classPrivateFieldGet2.default)(_this, _fontManager))); // 处理css @font-face

        if (document.body) {
          (0, _classPrivateFieldGet2.default)(_this, _fontManager).buildFontDeclareStyle(fontUrls[0]); // 只需要一个url即可
        } else {
          document.addEventListener('DOMContentLoaded', function () {
            (0, _classPrivateFieldGet2.default)(this, _fontManager).buildFontDeclareStyle(fontUrls[0]); // 只需要一个url即可
          });
        }

        (0, _classPrivateFieldSet2.default)(_this, _loaded, true);
        console.log("\u5F53\u524D\u9875\u9762\u5BF9\u5E94\u7684\u6C34\u5370\u7F16\u7801\u4E3A: ".concat((0, _classPrivateFieldGet2.default)(_this, _recorder).abbrGlyphCode)); // 资源加载成功但是水印编码上传失败此时使用本地编码

        (0, _classPrivateFieldGet2.default)(_this, _recorder).record().catch(function (errType) {
          (0, _classPrivateFieldGet2.default)(_this, _transfer).update(true);
        });
      }).catch(function (err) {
        console.log(err);
        console.log('连接出错 at copy listener class');
        (0, _classPrivateFieldSet2.default)(_this, _error, true); // 发送错误
      }); // 注册默认timeout事件

      this.on(EVENT_TIMEOUT, function (err, text) {
        if (err) {
          console.log('event timeout');
          console.warn(err);
          return text;
        }
      });
    }

    (0, _createClass2.default)(CopyListener, [{
      key: "connect",

      /**
       * 请求获取字体文件
       */
      value: function connect() {
        var _this2 = this;

        // 先判断是否加载成功 如果未加载成功则开始加载
        var timeStep = 50,
            waitTime = 0;

        if ((0, _classPrivateFieldGet2.default)(this, _transfer) && (0, _classPrivateFieldGet2.default)(this, _loaded)) {
          // 无效等待直接连接成功
          return Promise.resolve((0, _classPrivateFieldGet2.default)(this, _transfer));
        } else {
          return new Promise(function (resolve, reject) {
            var timer = setInterval(function () {
              if ((0, _classPrivateFieldGet2.default)(_this2, _transfer) && (0, _classPrivateFieldGet2.default)(_this2, _loaded)) {
                clearInterval(timer);

                _this2._trigger(EVENT_CONNECTED, [null, (0, _classPrivateFieldGet2.default)(_this2, _transfer)]);

                resolve((0, _classPrivateFieldGet2.default)(_this2, _transfer)); // 等待加载成功
              } else {
                waitTime += timeStep;
              }

              if ((0, _classPrivateFieldGet2.default)(_this2, _error)) {
                // 发生错误
                reject(EVENT_ERROR);

                _this2._trigger(EVENT_ERROR);
              } else if (waitTime >= (0, _classPrivateFieldGet2.default)(_this2, _fontManager).manager.getTimeout()) {
                // 超时
                _this2._trigger(EVENT_TIMEOUT);

                reject(EVENT_TIMEOUT);
              }
            }, timeStep); // 每隔50ms判断
          });
        }
      }
      /**
       * 添加css样式选择器
       * @param {*} selector 
       * @param {*} fontName (声明自定义字体) (取值范围为固定的枚举值)
       * @param {*} timeout 
       */

    }, {
      key: "addRule",
      value: function addRule(selector, fontName) {
        var _this3 = this;

        // 保存domSelector
        var oldLength = this.domSelector.size;
        this.domSelector.add(selector);

        if (this.domSelector.size > oldLength) {
          // new Rule
          // 判断fontNames是否存在fontName 如果存在表示无需再次创建字体规则
          if (fontName && (0, _classPrivateFieldGet2.default)(this, _fontManager).getAllFontNames().indexOf(fontName) === -1) {
            // 新的字体规则
            return (0, _classPrivateFieldGet2.default)(this, _fontManager).addFontDeclare(selector, fontName).then(function () {
              console.log('触发EVENT_ADD_FONT_RULE事件');

              _this3._trigger(EVENT_ADD_FONT_RULE, [null, fontName]);

              return Promise.resolve();
            }).catch(function (eventName) {
              _this3._trigger(eventName, eventName);

              return Promise.reject(eventName);
            });
          } else {
            // 给默认字体添加css选择器
            (0, _classPrivateFieldGet2.default)(this, _fontManager).addFontSelector(selector);
            return Promise.resolve();
          }
        } else {
          return Promise.reject('该选择器已经被添加过了');
        }
      }
    }, {
      key: "transform",
      value: function transform(text) {
        if (!DeviceDetect.isValidSystem() || DeviceDetect.isServerTransfer()) {
          // 返回原始内容
          return text;
        } else {
          if ((0, _classPrivateFieldGet2.default)(this, _transfer) && (0, _classPrivateFieldGet2.default)(this, _loaded)) {
            return (0, _classPrivateFieldGet2.default)(this, _transfer).transform(text);
          } else {
            return text;
          }
        }
      }
    }, {
      key: "update",
      value: function update(local) {
        if ((0, _classPrivateFieldGet2.default)(this, _transfer) && (0, _classPrivateFieldGet2.default)(this, _loaded)) {
          (0, _classPrivateFieldGet2.default)(this, _transfer).update(local);
        } else {
          this._trigger(EVENT_TIMEOUT, '字体资源加载超时');
        }
      }
    }, {
      key: "remove",
      value: function remove() {
        this._trigger(EVENT_REMOVE);
      }
      /**
       * binding event handler
       * @param {*} eventName 
       * @param {*} callback 
       */

    }, {
      key: "on",
      value: function on(eventName, callback) {
        if (!this.eventQueue[eventName]) {
          this.eventQueue[eventName] = [];
        }

        this.eventQueue[eventName].push(callback);
      }
      /**
       * trigger event
       * @param {*} eventName 
       * @param {*} eventParams 
       * @param {*} defaultHandler 
       */

    }, {
      key: "_trigger",
      value: function _trigger(eventName, eventParams, defaultHandler) {
        if (this.eventQueue[eventName] && this.eventQueue[eventName].length) {
          for (var i = 0; i < this.eventQueue[eventName].length; i++) {
            var handler = this.eventQueue[eventName][i];

            if (typeof handler == 'function') {
              if (typeof defaultHandler == 'function') {
                if (Array.isArray(eventParams)) {
                  defaultHandler.apply(void 0, (0, _toConsumableArray2.default)(eventParams));
                } else {
                  defaultHandler(eventParams);
                }
              }

              if (Array.isArray(eventParams)) {
                handler.apply(void 0, (0, _toConsumableArray2.default)(eventParams));
              } else {
                handler(eventParams);
              }
            }
          }
        }
      }
    }, {
      key: "connectStatus",
      get: function get() {
        return (0, _classPrivateFieldGet2.default)(this, _loaded);
      }
    }]);
    return CopyListener;
  }();

  module.exports = CopyListener;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/core/deviceDetect.js":
/*!**********************************!*\
  !*** ./src/core/deviceDetect.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_classCallCheck2, _createClass2) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);

  var config = __webpack_require__(/*! ../config/index */ "./src/config/index.js");
  /**
   * 
   */


  var DeviceDetect = /*#__PURE__*/function () {
    function DeviceDetect() {
      (0, _classCallCheck2.default)(this, DeviceDetect);
    }

    (0, _createClass2.default)(DeviceDetect, null, [{
      key: "getSystem",
      value: function getSystem() {
        if (DeviceDetect.isPCEnvironment()) {
          return DeviceDetect.getPCSystem();
        } else {
          return DeviceDetect.getMobileSystem();
        }
      }
    }, {
      key: "isPCEnvironment",
      value: function isPCEnvironment() {
        if (window.navigator && window.navigator.userAgent) {
          if (/(iPhone|iPad|iPod|iOS|Android)/i.exec(window.navigator.userAgent)) {
            // Mobile
            return false;
          } else {
            // PC
            return true;
          }
        }

        return false;
      }
    }, {
      key: "getPCSystem",
      value: function getPCSystem() {
        if (window.navigator && window.navigator.platform) {
          if (window.navigator.platform.toLowerCase().indexOf('win') > -1) {
            return 'windows';
          } else if (window.navigator.platform.toLowerCase().indexOf('mac') > -1) {
            return 'mac';
          } else {
            return window.navigator.platform;
          }
        }

        return '';
      }
    }, {
      key: "getMobileSystem",
      value: function getMobileSystem() {
        if (window.navigator && window.navigator.userAgent) {
          if (/(iPhone|iPad|iPod|iOS)/i.exec(window.navigator.userAgent)) {
            return 'ios';
          } else if (window.navigator.userAgent.match(/Android/i)) {
            return 'Android';
          }
        }
      }
    }, {
      key: "getDeviceInfo",
      value: function getDeviceInfo() {
        var deviceInfo = {};
        var os = DeviceDetect.getSystem();

        if (DeviceDetect.isPCEnvironment()) {
          // pc
          var _DeviceDetect$getPCBr = DeviceDetect.getPCBrowserInfo(),
              browser = _DeviceDetect$getPCBr.browser,
              browserVersion = _DeviceDetect$getPCBr.version;

          deviceInfo = Object.assign({}, {
            isPC: true,
            os: os,
            // windows mac
            isLowIE: browser == 'IE' && browserVersion <= 11,
            browser: browser,
            browserVersion: browserVersion
          });
        } else {
          // mobile web
          var _DeviceDetect$getMobi = DeviceDetect.getMobileBrowserInfo(),
              osVersion = _DeviceDetect$getMobi.version,
              networkType = _DeviceDetect$getMobi.networkType;

          deviceInfo = Object.assign({}, {
            isPC: false
          }, {
            os: os || '',
            // Android IOS
            osVersion: osVersion || '',
            networkType: networkType || ''
          });
        }

        return deviceInfo;
      }
    }, {
      key: "getPCBrowserInfo",
      value: function getPCBrowserInfo() {
        var data = {};

        if (window.navigator && window.navigator.userAgent) {
          var userAgent = window.navigator.userAgent.toLowerCase();
          var IERegExp = new RegExp(/MSIE\s+(\d+\.\d+)/i);
          var EdgeRegExp = new RegExp(/Edge\/(\d+)/i);

          if (userAgent.indexOf('compatible') > -1 && userAgent.indexOf('msie') > -1) {
            // IE11以下
            data['version'] = parseInt(userAgent.match(IERegExp)[1]);
            data['browser'] = 'IE';
          } else if (userAgent.indexOf('edge') > -1) {
            // Edge
            data['version'] = parseInt(userAgent.match(EdgeRegExp)[1]);
            data['browser'] = 'Edge';
          } else if (userAgent.indexOf('trident') > -1 && userAgent.indexOf('rv:11.0') > -1) {
            // IE11
            data['version'] = 11;
            data['browser'] = 'IE';
          } else if (userAgent.indexOf('firefox') > -1) {
            // FireFox
            data['version'] = parseInt(userAgent.match(/firefox\/(\d+)/)[1]);
            data['browser'] = 'Firefox';
          } else if (userAgent.indexOf('safari') > -1 && userAgent.indexOf('chrome') == -1) {
            // Safari
            data['version'] = parseInt(userAgent.match(/version\/(\d+)/)[1]);
            data['browser'] = 'Safari';
          } else if (userAgent.indexOf('safari') > -1 && userAgent.indexOf('chrome') > -1) {
            // Chrome
            data['version'] = parseInt(userAgent.match(/chrome\/(\d+\.?\d+?)/)[1]);
            data['browser'] = 'Chrome';

            for (var key in window.navigator.mimeTypes) {
              if (window.navigator.mimeTypes[key] && window.navigator.mimeTypes[key]['type'] == 'application/vnd/chromium.remoting-viewer') {
                // 360
                data['browser'] = '360';
                data['version'] = null;
              }
            }
          } else {
            data['browser'] = 'Other';
            data['version'] = null;
          }
        }

        return data;
      }
    }, {
      key: "getMobileBrowserInfo",
      value: function getMobileBrowserInfo() {
        var data = {};

        if (window.navigator && window.navigator.userAgent) {
          if (/(iPhone|iPad|iPod|iOS)/i.exec(window.navigator.userAgent)) {
            var version = window.navigator.userAgent.match(/OS\s+(\d+_\d+(_\d+)?)/i)[1];

            if (version) {
              version = version.replace('_', '.');
            }

            data['version'] = version;
          } else if (window.navigator.userAgent.match(/Android/i)) {
            data['version'] = window.navigator.userAgent.match(/Android\s+(\d+(\.\d+)?)?/)[1] || '';
          }
        }

        if (window.navigator && window.navigator.connection && window.navigator.connection.effectiveType) {
          data['networkType'] = window.navigator.connection.effectiveType;
        }

        return data;
      }
    }, {
      key: "isValidSystem",
      value: function isValidSystem() {
        return config.VALID_SYSTEM.indexOf(DeviceDetect.getSystem().toUpperCase()) !== -1;
      }
    }, {
      key: "isServerTransfer",
      value: function isServerTransfer() {
        return config.IS_SERVER_TRANSFER;
      }
    }]);
    return DeviceDetect;
  }();

  module.exports = DeviceDetect;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/core/fontManager.js":
/*!*********************************!*\
  !*** ./src/core/fontManager.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_classCallCheck2, _createClass2) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);

  var config = __webpack_require__(/*! ../config/index */ "./src/config/index.js");

  var _require = __webpack_require__(/*! ../data/events */ "./src/data/events.js"),
      EVENT_TIMEOUT = _require.EVENT_TIMEOUT,
      EVENT_ERROR = _require.EVENT_ERROR;

  var _require2 = __webpack_require__(/*! ../data/index */ "./src/data/index.js"),
      HTMLTAGS = _require2.HTMLTAGS;
  /**
   * 字体管理模块
   */


  var FontManager = /*#__PURE__*/function () {
    /**
     * @param {OptionsManager} manager 配置管理器
     */
    function FontManager(manager) {
      (0, _classCallCheck2.default)(this, FontManager);
      this.manager = manager;
      var fontName = this.manager.getSystemFontName();
      this.fontSets = [{
        fontName: fontName,
        fontUrl: config.FONT_BASE_URL + fontName,
        loaded: false
      }];
    }

    (0, _createClass2.default)(FontManager, [{
      key: "addFontSet",
      value: function addFontSet(fontName) {
        this.fontSets.push({
          fontName: fontName,
          fontUrl: config.FONT_BASE_URL + fontName,
          loaded: false
        });
      }
      /**
       * 加载字形符号Unicode编码文件
       */

    }, {
      key: "loadSpadeFile",
      value: function loadSpadeFile() {
        var _this = this;

        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.timeout = _this.manager.getTimeout();
          xhr.open('GET', config.SPADES_URL, true);
          xhr.setRequestHeader('Content-Type', 'text/plain');

          xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status === 200) {
                resolve(xhr.responseText); // 在这里添加字形文件

                console.log('loadSpadeFile success');
              } else {
                console.log('loadSpadeFile error');
                reject(EVENT_ERROR);
              }
            }
          };

          xhr.ontimeout = function () {
            console.log('loadSpadeFile ontimeout');
            reject(EVENT_TIMEOUT);
          };

          xhr.onerror = function () {
            console.log('loadSpadeFile onerror');
            reject(EVENT_ERROR);
          };

          xhr.send();
        });
      }
      /**
       * 加载某种字体的全部格式文件
       */

    }, {
      key: "loadAllFontFile",
      value: function loadAllFontFile() {
        var _this2 = this;

        // 通过fontSets找到最后一个未加载的字体文件
        var index = this.fontSets.findIndex(function (font) {
          return !font.loaded;
        });
        var fontUrl = this.fontSets[index]['fontUrl'];

        try {
          if (document.fonts && typeof FontFace == 'function') {
            // 支持FontFace
            var fontPromises = config.FONT_TYPES.map(function (fontType) {
              return new FontFace('pre_longhu_default_font', "url(".concat(fontUrl, ".").concat(fontType, ")")).load();
            });
            return Promise.all(fontPromises).then(function () {
              return Promise.resolve([fontUrl]);
            }).catch(function () {
              return Promise.reject(EVENT_ERROR);
            });
          } else {
            // 常规get请求字体资源文件
            var promises = config.FONT_TYPES.map(function (fontType) {
              return _this2.loadFontFile(fontUrl, fontType);
            });
            return Promise.all(promises).then(function (data) {
              console.log('加载所有fontfile success');
              return Promise.resolve(data);
            }).catch(function (eventName) {
              console.log('加载出错 at fontManager loadAllFontFile');
              return Promise.reject(eventName);
            });
          }
        } catch (error) {
          console.log('捕获错误 at fontManager loadAllFontFile');
          return Promise.reject(EVENT_ERROR);
        }
      }
      /**
       * 加载单个字体的单个格式文件
       * @param {*} fontUrl 
       * @param {*} fontType 
       */

    }, {
      key: "loadFontFile",
      value: function loadFontFile(fontUrl, fontType) {
        var _this3 = this;

        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.timeout = _this3.manager.getTimeout();
          xhr.open('GET', fontUrl + '.' + fontType, true);

          xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status === 200) {
                console.log('success');
                resolve(fontUrl);
              } else {
                console.log('onerror');
                reject(EVENT_ERROR);
              }
            }
          };

          xhr.ontimeout = function () {
            console.log('ontimeout');
            reject(EVENT_TIMEOUT);
          };

          xhr.onerror = function () {
            console.log('onerror');
            reject(EVENT_ERROR);
          };

          xhr.send();
        });
      }
      /**
       * 解码字形unicode文件
       */

    }, {
      key: "addFontSpade",
      value: function addFontSpade(spades) {
        this.spades = JSON.parse(spades).map(function (charCode) {
          return String.fromCharCode(charCode);
        });
        console.log(this.spades);
        console.log('this.spades');
      }
    }, {
      key: "buildFontDeclareStyle",
      value: function buildFontDeclareStyle(fontUrl, fontName) {
        // 根据支持的文件格式生成css
        var style = document.createElement('style');
        style.id = 'maia-copy-style';
        var fontFormat = '',
            fontFamilySrc = '';

        if (config.FONT_TYPES.indexOf('eot') !== -1) {
          fontFamilySrc = "src: url('".concat(fontUrl, ".eot');\nsrc: url('").concat(fontUrl, ".eot?#iefix') format('embedded-opentype'),\n");
        } else {
          fontFamilySrc = 'src: ';
        }

        config.FONT_TYPES.forEach(function (fontType) {
          if (fontType == 'eot') {
            fontFamilySrc += '';
          } else {
            fontFormat = fontType === 'ttf' ? 'truetype' : fontType;
            fontFamilySrc += "url('".concat(fontUrl, ".").concat(fontType, "') format('").concat(fontFormat, "'),\n");
          }
        });
        fontFamilySrc = fontFamilySrc.replace(/\,\n$/, ';');
        var fontDeclare = "@font-face { font-family: 'longhu-default-font'; ".concat(fontFamilySrc, "}");
        var oldFontFamily = getComputedStyle(document.body).fontFamily;
        var newFontFamily = '"longhu-default-font", ' + oldFontFamily; // 罗列所有html标签

        style.innerHTML = fontDeclare + "\n ".concat(HTMLTAGS, " {font-family: ").concat(newFontFamily, ";}");
        document.head.appendChild(style);
      }
      /**
       * 添加新的字体规则及css选择器
       * @param {*} ruleName 
       * @param {*} fontName 
       */

    }, {
      key: "addFontDeclare",
      value: function addFontDeclare(ruleName, fontName) {
        var _this4 = this;

        // 根据支持的文件格式生成css
        var styleTAG = document.getElementById('maia_copy_custom_style');
        var oldStyleRules = '';

        if (styleTAG) {
          oldStyleRules = styleTAG.textContent;
          document.head.removeChild(styleTAG);
        }

        var fontUrl = config.FONT_BASE_URL + fontName;
        var promises = config.FONT_TYPES.map(function (fontType) {
          return _this4.loadFontFile(fontUrl, fontType);
        });
        return Promise.all(promises).then(function () {
          // 记录fontName
          _this4.fontSets.push({
            fontName: fontName,
            fontUrl: config.FONT_BASE_URL + fontName,
            loaded: true
          });

          var fontFormat = '',
              fontFamilySrc = '';

          if (config.FONT_TYPES.indexOf('eot') !== -1) {
            fontFamilySrc = "src: url('".concat(fontUrl, ".eot');\nsrc: url('").concat(fontUrl, ".eot?#iefix') format('embedded-opentype'),\n");
          } else {
            fontFamilySrc = 'src: ';
          }

          config.FONT_TYPES.forEach(function (fontType) {
            if (fontType == 'eot') {
              fontFamilySrc += '';
            } else {
              fontFormat = fontType === 'ttf' ? 'truetype' : fontType;
              fontFamilySrc += "url('".concat(fontUrl, ".").concat(fontType, "') format('").concat(fontFormat, "'),\n");
            }
          });
          fontFamilySrc = fontFamilySrc.replace(/\,\n$/, ';');
          var fontDeclare = "@font-face { font-family: 'longhu-custom-".concat(fontName, "'; ").concat(fontFamilySrc, "}");
          var oldFontFamily = getComputedStyle(document.body).fontFamily;
          var newFontFamily = "\"longhu-custom-".concat(fontName, "\", ").concat(oldFontFamily);
          var styleRules = oldStyleRules + '\n' + fontDeclare + "\n ".concat(ruleName, " {font-family: ").concat(newFontFamily, ";}");
          styleTAG = document.createElement('style');
          styleTAG.id = 'maia_copy_custom_style';
          styleTAG.textContent = styleRules;
          document.head.appendChild(styleTAG);
          return Promise.resolve();
        }).catch(function (err) {
          return Promise.reject(err);
        });
      }
    }, {
      key: "addFontSelector",
      value: function addFontSelector(ruleName) {
        var styleTAG = document.getElementById('maia_copy_custom_style');
        var oldFontFamily = getComputedStyle(document.body).fontFamily;
        var newFontFamily = '"longhu-default-font", ' + oldFontFamily;
        var oldStyleRules = '';

        if (styleTAG) {
          oldStyleRules = styleTAG.textContent;
          document.head.removeChild(styleTAG);
        }

        var styleRules = oldStyleRules + "\n\n      ".concat(ruleName, " {\n        font-family: ").concat(newFontFamily, ";\n      }\n    ");
        styleTAG = document.createElement('style');
        styleTAG.id = 'maia_copy_custom_style';
        styleTAG.textContent = styleRules;
        document.head.appendChild(styleTAG);
      }
    }, {
      key: "getAllFontNames",
      value: function getAllFontNames() {
        var fontNames = [];
        this.fontSets.forEach(function (font) {
          if (font.loaded) {
            fontNames.push(font.fontName);
          }
        });
        return fontNames;
      }
    }]);
    return FontManager;
  }();

  module.exports = FontManager;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/core/recorder.js":
/*!******************************!*\
  !*** ./src/core/recorder.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"), __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldGet */ "./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js"), __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldSet */ "./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_classCallCheck2, _createClass2, _classPrivateFieldGet2, _classPrivateFieldSet2) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);
  _classPrivateFieldGet2 = _interopRequireDefault(_classPrivateFieldGet2);
  _classPrivateFieldSet2 = _interopRequireDefault(_classPrivateFieldSet2);

  /**
   * 用于记录并上报相关数据的模块
   * 1. 记录oaCount, appKey, deviceInfo, appInfo, glyphCode, abbrGlyphCode
   * 2. 具有生成和更新水印编码数据功能
   * 2. 具有上报数据及错误(正常的水印数据、资源加载异常、运营统计数据等)功能
   */
  var md5 = __webpack_require__(/*! md5 */ "./node_modules/md5/md5.js");

  var config = __webpack_require__(/*! ../config/index */ "./src/config/index.js");

  var DeviceDetect = __webpack_require__(/*! ./deviceDetect */ "./src/core/deviceDetect.js");

  var _require = __webpack_require__(/*! ../data/index */ "./src/data/index.js"),
      STORAGE_ITEM_KEY = _require.STORAGE_ITEM_KEY,
      STORAGE_PREFIX = _require.STORAGE_PREFIX,
      STORAGE_CHAR_COUNT = _require.STORAGE_CHAR_COUNT,
      STORAGE_TRANS_COUNT = _require.STORAGE_TRANS_COUNT;

  var _require2 = __webpack_require__(/*! ../data/events */ "./src/data/events.js"),
      EVENT_SUCCESS = _require2.EVENT_SUCCESS,
      EVENT_ERROR = _require2.EVENT_ERROR,
      EVENT_TIMEOUT = _require2.EVENT_TIMEOUT;

  var _mode = new WeakMap();

  var Recorder = /*#__PURE__*/function () {
    function Recorder(oaCount, appKey) {
      (0, _classCallCheck2.default)(this, Recorder);

      _mode.set(this, {
        writable: true,
        value: void 0
      });

      this.oaCount = oaCount; // oa账号

      this.appKey = appKey; // 应用key

      this.glyphCode = null; // 完整的32位字符串

      this.abbrGlyphCode = null; // 字体水印编码(简写22位字符串)

      (0, _classPrivateFieldSet2.default)(this, _mode, ''); // 模式

      this.devCustomGlyphCode = null; // 调试模式下自定义的水印编码

      this.lastCreatedTime = null; // 水印编码生成的时间
    }
    /**
     * 生成水印编码(md5算法32位字符串截取前10位字符)
     * 不再使用deviceKey而是使用time及oaCount及appKey计算md5
     * 水印编码格式: 10位字符(16进制)转换为20位字符(4进制不足两位补0)
     * 在页面文字编码时,在水印编码前后各添加3作为默认分隔符使得水印编码长度达到22位
     * 该方法返回: md5字符串(上报数据), 页面文字水印编码(22位字符), 水印编码生成时间(时间戳)
     * @returns Array(md5Code: string, abbrGlyphCode: string, createdTime: Number)
     */


    (0, _createClass2.default)(Recorder, [{
      key: "generateGlyphCode",
      value: function generateGlyphCode() {
        if ((0, _classPrivateFieldGet2.default)(this, _mode) === 'custom') {
          this.lastCreatedTime = Date.now();
          this.generateCustomGlyphCode(this.devCustomGlyphCode);
        } else {
          this.lastCreatedTime = Date.now();
          var source = '' + this.lastCreatedTime + this.oaCount + this.appKey;
          this.glyphCode = md5(source);
          var abbrcode = this.glyphCode.slice(0, config.CODELEN).split('').map(function (unit) {
            var codeStr = Number('0x' + unit).toString(config.CODE_BASE);

            if (codeStr.length < Math.sqrt(config.CODE_BASE)) {
              codeStr = '0' + codeStr;
            }

            return codeStr;
          }).join('');
          this.abbrGlyphCode = '3' + abbrcode + '3';
        }

        return this.abbrGlyphCode;
      }
      /**
       * 当水印服务器网络出现异常时,使用oaCount与time生成本地水印编码
       * 方便解码出oaCount与time(时/分)
       */

    }, {
      key: "generateLocalGlyphCode",
      value: function generateLocalGlyphCode() {
        var oaCount = this.oaCount;

        if (this.oaCount.length > 5) {
          // oaCount(前4位)+ 数字1位
          oaCount = this.oaCount.slice(0, 4) + this.oaCount.slice(this.oaCount.length - 1);
        }

        var now = new Date();
        var month = now.getMonth() + 1 < 10 ? '0' + (now.getMonth() + 1) : now.getMonth() + 1;
        var day = now.getDate() < 10 ? '0' + now.getDate() : now.getDate();
        var time = '' + month + '' + day;
        this.abbrGlyphCode = '' + oaCount + '3' + time;
        this.glyphCode = '' + oaCount + '3' + time;
        console.log("\u751F\u6210\u672C\u5730\u7F16\u7801 = ".concat(this.abbrGlyphCode));
        return this.abbrGlyphCode;
      }
      /**
       * 代码调试时允许指定水印编码
       * @param {*} customCode 
       */

    }, {
      key: "generateCustomGlyphCode",
      value: function generateCustomGlyphCode(customCode) {
        if (typeof customCode !== 'string') return null;
        var code = customCode.split('').slice(0, 16).map(function (unit) {
          var num = Number('0x' + unit);
          if (num >= 16) return '';
          var code = num.toString(config.CODE_BASE);

          if (code.length < Math.sqrt(config.CODE_BASE)) {
            code = '0' + code;
          }

          return code;
        }).join('');
        this.abbrGlyphCode = code;
        this.glyphCode = customCode;
      }
      /**
       * 记录水印数据
       */

    }, {
      key: "record",
      value: function record() {
        var _this = this;

        // 上报
        console.log("oaCount = ".concat(this.oaCount));
        console.log("appKey = ".concat(this.appKey));
        console.log("lastCreatedTime = ".concat(this.lastCreatedTime));
        console.log("glyphCode = ".concat(this.glyphCode));
        var deviceInfo = DeviceDetect.getDeviceInfo();

        if (deviceInfo['browser'] == 'IE' && deviceInfo['browserVersion'] <= 9) {
          return;
        }

        var data = {
          'version': config.VERSION,
          'platform': 'H5',
          // 暂时修改成H5，等后端增加类型，修改成H5-font
          'appKey': this.appKey,
          'wmList': []
        };
        var prevWMData = [];

        if (window.localStorage) {
          for (var i = 0; i < window.localStorage.length; i++) {
            var itemKey = window.localStorage.key(i);

            if (itemKey.indexOf('count') === -1 && itemKey.indexOf(STORAGE_PREFIX) == 0) {
              // 找到未上传成功的数据
              console.log('找到未上传成功的数据');
              prevWMData = prevWMData.concat(JSON.parse(window.localStorage.getItem(itemKey)));
            }
          }
        }

        data['wmList'] = prevWMData;
        var wmItem = {
          wmKey: this.glyphCode,
          userAccount: this.oaCount,
          markTime: this.lastCreatedTime,
          os: deviceInfo['os'],
          osVersion: deviceInfo['browserVersion'] || deviceInfo['osVersion'],
          browser: deviceInfo['browser'],
          extendValue: JSON.stringify({
            '_page_title_': document.title || '',
            '_page_url_': document.location.href || ''
          })
        };
        data['wmList'].push(wmItem);
        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.open('POST', config.GATHER_SERVER_URL, true);
          xhr.setRequestHeader('X-Gaia-Api-Key', config.API_KEY);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.timeout = config.TIMEOUT; // 5s

          xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status === 200) {
                var res;

                if (xhr.response) {
                  res = JSON.parse(xhr.response);
                } else if (xhr.responseText) {
                  res = JSON.parse(xhr.responseText);
                }

                if (res && res.code == 0) {
                  _this.clearWaterMarkStorage(data);

                  resolve(EVENT_SUCCESS);
                } else {
                  _this.saveWaterMarkStorage(data);

                  reject(EVENT_ERROR);
                }
              } else {
                _this.saveWaterMarkStorage(data);

                reject(EVENT_ERROR);
              }
            }
          };

          xhr.ontimeout = function () {
            _this.saveWaterMarkStorage(data);

            reject(EVENT_TIMEOUT);
          };

          xhr.onerror = function () {
            _this.saveWaterMarkStorage(data);

            reject(EVENT_ERROR);
          };

          xhr.send(JSON.stringify(data));
        });
      }
      /**
       * 记录水印错误
       * @param {*} errType 
       */

    }, {
      key: "recordError",
      value: function recordError(errType) {
        var data = {
          errType: errType
        };
        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.open('POST', config.ERROR_GATHER_SERVER_URL, true);
          xhr.setRequestHeader('X-Gaia-Api-Key', config.ERROR_API_KEY);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.timeout = config.TIMEOUT; // 5s

          xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status === 200) {
                var res;

                if (xhr.response) {
                  res = JSON.parse(xhr.response);
                } else if (xhr.responseText) {
                  res = JSON.parse(xhr.responseText);
                }

                if (res && res.code == 0) {
                  resolve(EVENT_SUCCESS);
                } else {
                  reject(EVENT_ERROR);
                }
              } else {
                reject(EVENT_ERROR);
              }
            }
          };

          xhr.ontimeout = function () {
            reject(EVENT_TIMEOUT);
          };

          xhr.onerror = function () {
            reject(EVENT_ERROR);
          };

          xhr.send(JSON.stringify(data));
        });
      }
      /**
       * 记录汉字转换率
       * @param {*} transCount 转换汉字个数
       * @param {*} charCount 总汉字个数
       */

    }, {
      key: "recordGlyphCount",
      value: function recordGlyphCount(transCount, charCount) {
        // 上报转换的文字个数, 从localstorage中取出
        var oldCharCount = window.localStorage.getItem(STORAGE_CHAR_COUNT);
        var oldTransCount = window.localStorage.getItem(STORAGE_TRANS_COUNT);

        if (oldTransCount && !Number.isNaN(Number(oldTransCount))) {
          transCount = Number(oldTransCount) + Number(transCount);
        } else if (!Number.isNaN(Number(transCount))) {
          transCount = Number(transCount);
        } else {
          transCount = 0;
        }

        if (oldCharCount && !Number.isNaN(Number(oldCharCount))) {
          charCount = Number(oldCharCount) + Number(charCount);
        } else if (!Number.isNaN(Number(charCount))) {
          charCount = Number(charCount);
        } else {
          charCount = 0;
        }

        if (transCount >= config.CHUNKCOUNT) {
          console.log('进行字数上报');
          transCount = 0;
          charCount = 0;
        } else {
          window.localStorage.setItem(STORAGE_TRANS_COUNT, transCount);
          window.localStorage.setItem(STORAGE_CHAR_COUNT, charCount);
        }
      }
    }, {
      key: "setMode",
      value: function setMode(mode, customGlyphCode) {
        (0, _classPrivateFieldSet2.default)(this, _mode, mode);
        this.devCustomGlyphCode = customGlyphCode;
      }
      /**
       * 存储水印数据信息
       * @param {*} data 
       */

    }, {
      key: "saveWaterMarkStorage",
      value: function saveWaterMarkStorage(data) {
        // for(let i = 0; i < data['wmList'].length; i++){
        if (window.localStorage) {
          // 针对addRule(fontName)可能存在多次覆盖,但不影响功能
          window.localStorage.setItem(STORAGE_ITEM_KEY, JSON.stringify(data['wmList']));
        } // }

      }
      /**
       * 清空所有的水印编码数据
       * @param {*} data 
       */

    }, {
      key: "clearWaterMarkStorage",
      value: function clearWaterMarkStorage(data) {
        // for(let i = 0; i < data['wmList'].length; i++){
        if (window.localStorage) {
          window.localStorage.removeItem(STORAGE_ITEM_KEY);
        } // }

      }
    }]);
    return Recorder;
  }();

  module.exports = Recorder;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/core/transfer.js":
/*!******************************!*\
  !*** ./src/core/transfer.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"), __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldGet */ "./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js"), __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldSet */ "./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_classCallCheck2, _createClass2, _classPrivateFieldGet2, _classPrivateFieldSet2) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);
  _classPrivateFieldGet2 = _interopRequireDefault(_classPrivateFieldGet2);
  _classPrivateFieldSet2 = _interopRequireDefault(_classPrivateFieldSet2);

  var Utils = __webpack_require__(/*! ../utils/index.js */ "./src/utils/index.js");

  var config = __webpack_require__(/*! ../config/index */ "./src/config/index.js");

  var DeviceDetect = __webpack_require__(/*! ./deviceDetect.js */ "./src/core/deviceDetect.js");

  var _recorder = new WeakMap();

  var _fontManager = new WeakMap();

  var _spades = new WeakMap();

  var _glyphCode = new WeakMap();

  var _pointer = new WeakMap();

  var Transfer = /*#__PURE__*/function () {
    /**
     * 
     * @param {*} recorder Recorder
     * @param {*} fontManager FontManager
     */
    function Transfer(recorder, fontManager) {
      (0, _classCallCheck2.default)(this, Transfer);

      _recorder.set(this, {
        writable: true,
        value: void 0
      });

      _fontManager.set(this, {
        writable: true,
        value: void 0
      });

      _spades.set(this, {
        writable: true,
        value: void 0
      });

      _glyphCode.set(this, {
        writable: true,
        value: void 0
      });

      _pointer.set(this, {
        writable: true,
        value: 0
      });

      (0, _classPrivateFieldSet2.default)(this, _recorder, recorder);
      (0, _classPrivateFieldSet2.default)(this, _fontManager, fontManager);
      (0, _classPrivateFieldSet2.default)(this, _glyphCode, (0, _classPrivateFieldGet2.default)(this, _recorder).generateGlyphCode());
      (0, _classPrivateFieldSet2.default)(this, _spades, (0, _classPrivateFieldGet2.default)(this, _fontManager).spades);
    }
    /**
     * 将文本转换为unicode
     * @param {*} text 
     */


    (0, _createClass2.default)(Transfer, [{
      key: "transform",
      value: function transform(text) {
        // 未开启水印的操作系统/后端编码 直接返回原始内容
        if (!DeviceDetect.isValidSystem() || DeviceDetect.isServerTransfer()) {
          return text;
        }

        var transCount = 0,
            charCount = 0,
            processText = '',
            textObj = [],
            execRes,
            splitHtml,
            splitIndex,
            presplitIndex = 0;
        var cjkCharReg = new RegExp("[\\u4E00-\\u9FFF]", 'i'); // 先判断text是否含有html标签

        var r = /<\/?.+?\/?>/g;

        if (/<\/?.+?\/?>/g.test(text)) {
          while (execRes = r.exec(text)) {
            // 只要匹配到html标签则进行分割将第一项存入,后面接着分割
            var splitHtml = execRes[0];
            var splitIndex = execRes.index;
            var part = text.slice(presplitIndex, splitIndex);
            presplitIndex = splitIndex + splitHtml.length;
            textObj.push({
              text: part,
              transform: true
            });
            textObj.push({
              text: splitHtml,
              transform: false
            });
          } // 补齐最后一项


          textObj.push({
            text: text.slice(presplitIndex),
            transform: true
          });
        } else {
          textObj.push({
            text: text,
            transform: true
          });
        }

        var char, glyphIndex, charUnicode;

        for (var j = 0; j < textObj.length; j++) {
          if (textObj[j].transform) {
            for (var i = 0; i < textObj[j].text.length; i++) {
              char = textObj[j].text[i];
              glyphIndex = 0;
              charUnicode = Number(char.charCodeAt(0)).toString(16);

              if (!cjkCharReg.test(char)) {
                // 只转换unicode范围为/\u4E00-\u9FFF/的字符集
                processText += '&#x' + charUnicode;
                continue;
              }

              if ((0, _classPrivateFieldGet2.default)(this, _spades).indexOf(char) !== -1) {
                // 字符存在
                glyphIndex = Number((0, _classPrivateFieldGet2.default)(this, _glyphCode)[(0, _classPrivateFieldGet2.default)(this, _pointer)]); // 指针长度为待转换文本的长度->转换->code编码长度

                (0, _classPrivateFieldSet2.default)(this, _pointer, ((0, _classPrivateFieldGet2.default)(this, _pointer) + 1) % (0, _classPrivateFieldGet2.default)(this, _glyphCode).length);
                processText += '&#x' + charUnicode + glyphIndex;
                transCount++; // 已经转换的汉字个数
              } else {
                // 字符不存在
                processText += '&#x' + charUnicode;
              }

              charCount++; // 待转换的文本中的汉字个数
            }
          } else {
            // html标签
            processText += textObj[j].text;
          }
        }

        (0, _classPrivateFieldGet2.default)(this, _recorder).recordGlyphCount(transCount, charCount); // 记录使用的总汉字个数与转换汉字个数

        return processText;
      }
    }, {
      key: "update",
      value: function update(local) {
        var _this = this;

        (0, _classPrivateFieldSet2.default)(this, _glyphCode, local ? (0, _classPrivateFieldGet2.default)(this, _recorder).generateLocalGlyphCode() : (0, _classPrivateFieldGet2.default)(this, _recorder).generateGlyphCode());
        (0, _classPrivateFieldSet2.default)(this, _pointer, 0); // 重置指针

        if (!local) {
          (0, _classPrivateFieldGet2.default)(this, _recorder).record().catch(function (errType) {
            if (config.IS_OPEN_NON_NETWORK) {
              // 使用本地编码
              (0, _classPrivateFieldSet2.default)(_this, _glyphCode, (0, _classPrivateFieldGet2.default)(_this, _recorder).generateLocalGlyphCode());
              console.log("no network, glyphCode = ".concat((0, _classPrivateFieldGet2.default)(_this, _glyphCode)));
            } // 上报错误


            console.log(errType);
            (0, _classPrivateFieldGet2.default)(_this, _recorder).recordError(errType).catch(function () {});
          });
        }
      }
    }]);
    return Transfer;
  }();

  module.exports = Transfer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/data/events.js":
/*!****************************!*\
  !*** ./src/data/events.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  /**
   * EventName Set
   */
  module.exports = {
    EVENT_ADD_FONT_RULE: 'addFontRule',
    EVENT_REMOVE: 'remove',
    EVENT_TIMEOUT: 'timeout',
    EVENT_ERROR: 'error',
    EVENT_SUCCESS: 'success',
    EVENT_CONNECTED: 'connected'
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/data/fonts.js":
/*!***************************!*\
  !*** ./src/data/fonts.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  /**
   * FontName Set
   */
  module.exports = {
    MICROSOFTYAHEI: 'MicrosoftYahei',
    PINGFANGSC: 'PingfangSC'
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/data/index.js":
/*!***************************!*\
  !*** ./src/data/index.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  var HTMLTAGS = ['body', '.maia_default_copy_listener'].join(',');
  var STORAGE_PREFIX = 'maia_copy_listener_';
  var STORAGE_ITEM_KEY = 'maia_copy_listener_item';
  var STORAGE_CHAR_COUNT = 'maia_copy_listener_char_count';
  var STORAGE_TRANS_COUNT = 'maia_copy_listener_trans_count';
  module.exports = {
    HTMLTAGS: HTMLTAGS,
    STORAGE_PREFIX: STORAGE_PREFIX,
    STORAGE_ITEM_KEY: STORAGE_ITEM_KEY,
    STORAGE_CHAR_COUNT: STORAGE_CHAR_COUNT,
    STORAGE_TRANS_COUNT: STORAGE_TRANS_COUNT
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  var config = __webpack_require__(/*! ./config */ "./src/config/index.js");

  var CopyListener = __webpack_require__(/*! ./core/copyListener */ "./src/core/copyListener.js");

  var Utils = __webpack_require__(/*! ./utils/index */ "./src/utils/index.js");

  var Recorder = __webpack_require__(/*! ./core/recorder */ "./src/core/recorder.js");

  var _require = __webpack_require__(/*! ./data/events */ "./src/data/events.js"),
      EVENT_ADD_FONT_RULE = _require.EVENT_ADD_FONT_RULE,
      EVENT_REMOVE = _require.EVENT_REMOVE;

  var FontManager = __webpack_require__(/*! ./core/fontManager */ "./src/core/fontManager.js");

  var OptionsManager = __webpack_require__(/*! ./config/option */ "./src/config/option.js");
  /**
   * options:
   * {
   *    fontName: 全部操作系统默认字体(MicrosoftYahei) // 其实没有默认值
   *    winFontName: windows(MicrosoftYahei)
   *    macFontName: mac(PingfangSC)
   *    androidFontName: android(MicrosoftYahei)
   *    iosFontName: ios(PingfangSC)
   *    timeout: 超时时间
   * 不建议开放的配置
   *    system: 指定开启水印编码的操作系统(window/mac/android/ios)
   * }
   */


  var createCopyListener = function () {
    var listener;

    function createCopyListener(oaCount, appKey, options) {
      if (listener) {
        console.warn('不能多次创建实例');
        return listener;
      } // 创建recorder, optionsManager, fontManager, listener


      var recorder = new Recorder(oaCount, appKey);

      if (options['customCode']) {
        recorder.setMode('custom', options['customCode']);
      }

      var optionsManager = new OptionsManager(options);
      var fontManager = new FontManager(optionsManager);
      listener = new CopyListener(recorder, fontManager);
      listener.on(EVENT_ADD_FONT_RULE, function (err, newFontName) {
        if (!err) {
          console.log("\u5F53\u524D\u52A0\u8F7D\u7684\u65B0\u5B57\u4F53: ".concat(newFontName, " \u6CA1\u6709\u9519\u8BEF")); // recorder.record().catch(() => {
          //   // listener.update(true)
          // })
        }
      });
      listener.on(EVENT_REMOVE, function () {
        listener = null;
      });
      return listener;
    }

    return createCopyListener;
  }();

  module.exports = createCopyListener;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/utils/index.js":
/*!****************************!*\
  !*** ./src/utils/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  var Utils = {
    isObject: function isObject(obj) {
      return Object.prototype.toString.call(obj) === '[object Object]';
    },
    isNotEmptyString: function isNotEmptyString(str) {
      return typeof str === 'string' && str !== '';
    },
    isNotString: function isNotString(str) {
      return typeof str !== 'string';
    },
    isNotNaNNumber: function isNotNaNNumber(num) {
      return typeof num !== 'number' && Number.isNaN(num);
    }
  };
  module.exports = Utils;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ })

/******/ });
});
//# sourceMappingURL=forbid-copy.dev.min.js.map